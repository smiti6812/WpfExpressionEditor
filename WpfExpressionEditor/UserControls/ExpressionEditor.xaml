<Window x:Class="WpfExpressionEditor.UserControls.ExpressionEditor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"           
             xmlns:views="clr-namespace:WpfExpressionEditor.ViewModel"                       
             mc:Ignorable="d" 
             x:Name="SensorLocationEditor"   Width="Auto" Height="Auto" MaxHeight="450" MaxWidth="650" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
    <Window.DataContext>
        <views:ExpressionEditorViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <Style TargetType="ListBoxItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                  Padding="{TemplateBinding Control.Padding}"
                  BorderBrush="{TemplateBinding Border.BorderBrush}"
                  Background="{TemplateBinding Panel.Background}"
                  Name="Bd"
                  SnapsToDevicePixels="True">
                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                               ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                               ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                               HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                               SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="Selector.IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.Background" TargetName="Bd" 
                        Value="Transparent"/>
                                <Setter Property="Border.BorderBrush" TargetName="Bd">
                                    <Setter.Value>
                                        <SolidColorBrush>#FFDADADA</SolidColorBrush>
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="Selector.IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.Background" TargetName="Bd" Value="LightGreen"/>
                                <Setter Property="Border.BorderBrush" TargetName="Bd">
                                    <Setter.Value>
                                        <SolidColorBrush>#FF26A0DA</SolidColorBrush>
                                    </Setter.Value>
                                </Setter>
                            </MultiTrigger>
                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                <Setter Property="Panel.Background" TargetName="Bd" 
                       Value="LightGreen"/>
                                <Setter Property="Border.BorderBrush" TargetName="Bd">
                                    <Setter.Value>
                                        <SolidColorBrush>#A826A0DA</SolidColorBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd">
                                    <Setter.Value>
                                        <DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    <Border  BorderThickness="1" BorderBrush="Black">
        <Grid Height="auto"  VerticalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition Height="0.2*"/>
                <RowDefinition Height="0.5*"/>
                <RowDefinition Height="0.135*"/>
                <RowDefinition Height="0.5*"/>
                <RowDefinition Height="0.12*"/>
            </Grid.RowDefinitions>
            <Grid x:Name="FirstGrid" Background="DarkGray" Height="Auto" VerticalAlignment="Stretch">
                <StackPanel  VerticalAlignment="Center"  HorizontalAlignment="Center">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="30"/>
                            <ColumnDefinition Width="30"/>
                            <ColumnDefinition Width="30"/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition Width="32"/>
                            <ColumnDefinition Width="30"/>
                            <ColumnDefinition Width="10"/>
                            <ColumnDefinition Width="30" />
                            <ColumnDefinition Width="66"/>
                            <ColumnDefinition Width="66"/>
                            <ColumnDefinition Width="66"/>
                            <ColumnDefinition Width="*"/>

                        </Grid.ColumnDefinitions>
                        <Button Content="()" ToolTip = "Selected part of the entered formula will be put between brackets" Grid.Column="1" Width="27" FontWeight="Bold" Height="25" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="Brackets" Margin="0,20,0,0" VerticalAlignment="Top"/>
                        <Button Content="!=" ToolTip = "e.g. Direction != XYZ" Grid.Column="2" Width="27" FontWeight="Bold" Height="25" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="!=" Margin="0,20,0,0" VerticalAlignment="Top"/>
                        <Button Content="==" ToolTip = "e.g. Direction == XYZ" Grid.Column="3" Width="27" FontWeight="Bold" Height="25" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="==" Margin="0,20,0,0" VerticalAlignment="Top"/>
                        <Button Content="And" ToolTip = "Direction == XYZ And Location != X"  Grid.Column="5"  Width="29" Height="25" FontWeight="SemiBold" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="And" VerticalAlignment="Top" Margin="0,20,0,0" />
                        <Button Content="Or" ToolTip = "Direction == XYZ Or Location != X" Grid.Column="6" Width="26" Height="25" FontWeight="SemiBold" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="Or" VerticalAlignment="Top" Margin="0,20,0,0"/>
                        <Button Content="Not" ToolTip = "Not Direction.Contains(XYZ)" Grid.Column="8" Width="30" Height="25" FontWeight="SemiBold" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="Not"  VerticalAlignment="Top"  Margin="0,20,0,0" />
                        <Button Content="Contains" ToolTip = "Direction.Contains(XYZ)" Grid.Column="9" Width="61" Height="25" FontWeight="SemiBold" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="Contains"  VerticalAlignment="Top" Margin="0,20,0,0" />
                        <Button Content="StartsWith" ToolTip = "Direction.StartsWith(XYZ)" Grid.Column="10" Width="65" Height="25" FontWeight="SemiBold" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="StartsWith"  VerticalAlignment="Top" Margin="0,20,0,0" />
                        <Button Content="EndsWith" ToolTip ="Direction.EndsWith(XYZ)" Grid.Column="11" Width="61" Height="25" FontWeight="SemiBold" HorizontalAlignment="Stretch" Command="{Binding OperatorCommand}" CommandParameter="EndsWith"  VerticalAlignment="Top" Margin="0,20,0,0" />

                    </Grid>
                </StackPanel>
            </Grid>
            <Border  Grid.Row="1" BorderThickness="1" BorderBrush="Black">
                <Grid Grid.Row="1" Height="Auto" VerticalAlignment="Stretch" MinHeight="180">
                    <TextBox HorizontalAlignment="Stretch"  views:TextBoxHelper.SelectedText="{Binding SelectedText}" views:TextBoxHelper.SelectionStart="{Binding SelectionStart, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  IsInactiveSelectionHighlightEnabled ="True" SelectionBrush="Green"  x:Name="ExpressionText" TextWrapping="Wrap"  Text="{Binding ExpressionText, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"  VerticalAlignment="Stretch" Width="Auto" Height="Auto" Grid.Row="1">
                        <TextBox.InputBindings>
                            <MouseBinding MouseAction="RightClick" Command="{Binding GetSelectedItemCommand}" CommandParameter="{Binding}" />
                        </TextBox.InputBindings>
                        <TextBox.Resources>
                            <ContextMenu x:Key="TextEditorContextMenu" Background="White">
                                <MenuItem Command="ApplicationCommands.Copy" />
                                <MenuItem Command="ApplicationCommands.Cut" />
                                <MenuItem Command="ApplicationCommands.Paste" />
                            </ContextMenu>
                        </TextBox.Resources>
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Setter Property="Foreground" Value="Black" />
                                <Setter Property="ContextMenu" Value="{StaticResource TextEditorContextMenu}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RuleTextOk}" Value="True">
                                        <Setter Property="Foreground" Value="DarkGreen" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="TextChanged">
                                <i:InvokeCommandAction Command="{Binding ExpressionTextChangedCommand}"  />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBox>
                </Grid>
            </Border>
            <Border  Grid.Row="2" BorderThickness="1" BorderBrush="Black">
                <Grid Grid.Row="2">
                    <StackPanel Orientation="Horizontal"  HorizontalAlignment="Stretch">
                        <Label FontWeight="Bold" Content="Selected Field:" HorizontalAlignment="Stretch" />
                        <Label Content="{Binding SelectedField}" HorizontalAlignment="Stretch" >
                            <Label.Style>
                                <Style TargetType="Label">
                                    <Setter Property="Foreground" Value="Black" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PropertyAndValueSelected}" Value="True">
                                            <Setter Property="Foreground" Value="Green" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>
                        <Label FontWeight ="Bold" Content="Selected Value:" HorizontalAlignment="Stretch" />
                        <Label Content="{Binding SelectedPropertyValue}" HorizontalAlignment="Stretch">
                            <Label.Style>
                                <Style TargetType="Label">
                                    <Setter Property="Foreground" Value="Black" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PropertyAndValueSelected}" Value="True">
                                            <Setter Property="Foreground" Value="Green" />
                                            <Setter Property="FontWeight" Value="Bold" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Label.Style>
                        </Label>
                        <Rectangle Width="20" Height="20" Stroke="DarkGoldenrod" HorizontalAlignment="Stretch">
                            <Rectangle.Style>
                                <Style TargetType="Rectangle">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PropertyAndValueSelected}" Value="True">
                                            <Setter Property="Fill" Value="LightGreen" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PropertyAndValueSelected}" Value="False">
                                            <Setter Property="Fill" Value="Azure" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>
                        </Rectangle>
                        <Label FontStyle="Oblique" FontSize="10" Content="Select a field and a value then click on one of the following buttons&#10;'!=','==','StartsWith', 'EndsWith' or 'Contains'!" HorizontalAlignment="Center" />
                    </StackPanel>
                </Grid>
            </Border>
            <Grid Grid.Row="3" Background="LightGray" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                    <RowDefinition Height="25" />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="0.5*" />
                        <ColumnDefinition Width="1.5*" />
                        <ColumnDefinition Width="0.5*" />
                        <ColumnDefinition Width="1*" />
                    </Grid.ColumnDefinitions>
                    <Label Content="Fields:" HorizontalAlignment="Stretch" FontWeight="Bold" Grid.Column="0" VerticalAlignment="Top" Width="Auto" />
                    <Button Grid.Column="1" Content="Check Formula" Command="{Binding CheckFormulaCommand}" HorizontalAlignment="Right" VerticalAlignment="Center" Height="25"/>
                    <Button Grid.Column="2" IsEnabled="{Binding RuleTextOk}" Content="Save" Command="{Binding SaveCommand}" HorizontalAlignment="Right" VerticalAlignment="Center" Height="25" Width="36">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Foreground" Value="Black" />
                                <Setter Property="Content" Value="Black" ></Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RuleTextOk}" Value="True">
                                        <Setter Property="Background" Value="LightGreen" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Button Grid.Column="3" Content="Clear Editor" Command="{Binding ClearEditorCommand}" HorizontalAlignment="Right" VerticalAlignment="Center" Height="25" />
                </Grid>
                <Label Content="Values:" HorizontalAlignment="Left" FontWeight="Bold" Grid.Column="1" VerticalAlignment="Top" Width="112"/>
                <ListBox Grid.Row="1" x:Name="FieldList" FontWeight="DemiBold" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  ItemsSource="{Binding FieldsAndValues.Keys}" SelectedItem="{Binding SelectedField}" d:ItemsSource="{d:SampleData ItemCount=5}" >
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid Margin="0,2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{TemplateBinding Content}" Width="Auto" HorizontalAlignment="Stretch">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Foreground" Value="DimGray"></Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Foreground" Value="Black"></Setter>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDoubleClick" SourceName="FieldList">
                            <i:InvokeCommandAction Command="{Binding AddFieldCommand}" CommandParameter="{Binding ElementName=FieldList, Path=SelectedItem}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ListBox>
                <ListBox Grid.Row="1" Grid.Column="1" FontWeight="DemiBold" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="ValueList"  ItemsSource="{Binding FieldsAndValues.Values}" SelectedItem="{Binding SelectedPropertyValue}" d:ItemsSource="{d:SampleData ItemCount=5}" >
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid Margin="0,2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{TemplateBinding Content}" Width="Auto" HorizontalAlignment="Stretch">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Foreground" Value="DimGray"></Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Foreground" Value="Black"></Setter>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDoubleClick" SourceName="ValueList">
                            <i:InvokeCommandAction Command="{Binding AddPropertyValueCommand}" CommandParameter="{Binding ElementName=ValueList, Path=SelectedItem}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ListBox>
            </Grid>
            <Grid Grid.Row="4">
                <TextBox Grid.Row="3" x:Name="ErrorText" FontWeight="DemiBold" Text="{Binding ErrorText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <TextBox.Style>
                        <Style TargetType="TextBox">
                            <Setter Property="Foreground" Value="Red" />
                        </Style>
                    </TextBox.Style>
                </TextBox>
            </Grid>
        </Grid>
    </Border>
</Window>